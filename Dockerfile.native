# To build image run `docker build --tag ddns:<version> .`

ARG GRAALVM_VERSION=21.3.0
ARG JAVA_VERSION=11
ARG GRAALVM_WORKDIR=/graalvm/src/project

ARG APP_VERSION=1.7.7

# Multi-stage image ... creates intermediate layer(s) for doing the graalvm native
# build (this is discarded by docker post-build)
FROM ghcr.io/graalvm/graalvm-ce:java${JAVA_VERSION}-${GRAALVM_VERSION} AS build

ARG GRADLE_VERSION=7.2
ARG APP_VERSION

ARG MUSL_VERSION=x86_64
ARG ZLIB_VERSION=1.2.11

# Install tools required for project
# Run `docker build --no-cache .` to update dependencies
RUN gu install native-image \
 && microdnf install -y wget unzip libstdc++-static \
 && microdnf clean all \
 && wget https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp \
 && unzip -d /opt /tmp/gradle-${GRADLE_VERSION}-bin.zip \
 && rm /tmp/gradle-${GRADLE_VERSION}-bin.zip \
 && wget http://musl.cc/${MUSL_VERSION}-linux-musl-native.tgz -P /tmp \
 && tar -zxvf /tmp/${MUSL_VERSION}-linux-musl-native.tgz -C /opt \
 && rm /tmp/${MUSL_VERSION}-linux-musl-native.tgz \
 && wget https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz -P /tmp \
 && tar -zxvf /tmp/zlib-${ZLIB_VERSION}.tar.gz -C /tmp \
 && rm /tmp/zlib-${ZLIB_VERSION}.tar.gz

# Build MUSL to static link into application
ENV TOOLCHAIN_DIR=/opt/${MUSL_VERSION}-linux-musl-native

ENV PATH=$PATH:${TOOLCHAIN_DIR}/bin
ENV CC=$TOOLCHAIN_DIR/bin/gcc

WORKDIR /tmp/zlib-${ZLIB_VERSION}
RUN ./configure --prefix=${TOOLCHAIN_DIR} --static \
 && make \
 && make install \
 && rm -rf /tmp/zlib-${ZLIB_VERSION}/

ENV GRADLE_HOME=/opt/gradle-${GRADLE_VERSION}
ENV PATH=${GRADLE_HOME}/bin:${PATH}

WORKDIR /graalvm/src/project

# Copy the entire project and build it
# This layer is rebuilt when a file changes in the project directory
COPY . /graalvm/src/project
RUN ${GRADLE_HOME}/bin/gradle -q --no-daemon shadowJar \
 && ${JAVA_HOME}/bin/native-image \
    --static \
    --libc=musl \
    -R:MinHeapSize=1m \
    -R:MaxHeapSize=3m \
    -R:MaxNewSize=3m \
    -jar build/libs/ddns-${APP_VERSION}.jar

# Create a staging image (this will be part of the distribution)
#FROM oracle/graalvm-ce:${GRAALVM_VERSION} AS app-stage
#FROM alpine AS app-stage
FROM scratch AS app-stage

ARG GRAALVM_WORKDIR
ARG APP_VERSION

ENV APP_HOME=/opt/ddns
ENV PATH=${APP_HOME}/bin:${PATH}

WORKDIR ${APP_HOME}

COPY --from=build ${GRAALVM_WORKDIR}/ddns* ${APP_HOME}/

#CMD [ "/bin/sh" ]

# And we finally create the application layer
FROM app-stage AS app
ENTRYPOINT [ "./ddns" ]
CMD [ "-XX:+PrintGC" , "-XX:+PrintGCTimeStamps" , "-XX:+VerboseGC" , "-d" ]
