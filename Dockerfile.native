# To build image run `docker build --tag ddns:<version> .`

# Multi-stage image ... creates intermediate layer(s) for doing the graalvm native
# build (this is discarded by docker post-build)
FROM ubuntu:22.04 AS build

ARG CPU_ARCH=amd64

ARG GRAALVM_VERSION=22.3.0
ARG JAVA_VERSION=19
ARG GRAALVM_WORKDIR=/graalvm/src/project

ARG GRADLE_VERSION=7.6

# Install tools required for project
# Run `docker build --no-cache .` to update dependencies
RUN apt-get update -y \
 && apt-get upgrade -y \
 && apt-get install -y wget unzip build-essential zlib1g-dev \
 && apt-get autoremove --purge -y \
 && wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-java${JAVA_VERSION}-linux-${CPU_ARCH}-${GRAALVM_VERSION}.tar.gz -P /tmp \
 && tar zxvf /tmp/graalvm-ce-java${JAVA_VERSION}-linux-${CPU_ARCH}-${GRAALVM_VERSION}.tar.gz -C /opt \
 && wget https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -P /tmp \
 && unzip -d /opt /tmp/gradle-${GRADLE_VERSION}-bin.zip

ARG MUSL_VERSION=10.2.1
ARG ZLIB_VERSION=1.2.13

RUN wget http://more.musl.cc/${MUSL_VERSION}/x86_64-linux-musl/x86_64-linux-musl-native.tgz -P /tmp \
 && mkdir /opt/musl-${MUSL_VERSION} \
 && tar -zxvf /tmp/x86_64-linux-musl-native.tgz -C /opt/musl-${MUSL_VERSION}/ \
 && wget https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz -P /tmp \
 && tar -zxvf /tmp/zlib-${ZLIB_VERSION}.tar.gz -C /tmp

# Build MUSL to static link into application
ENV TOOLCHAIN_DIR=/opt/musl-${MUSL_VERSION}/x86_64-linux-musl-native

ENV PATH=$PATH:${TOOLCHAIN_DIR}/bin
ENV CC=$TOOLCHAIN_DIR/bin/gcc

WORKDIR /tmp/zlib-${ZLIB_VERSION}
RUN ./configure --prefix=${TOOLCHAIN_DIR} --static \
 && make \
 && make install \
 && rm -rf /tmp/zlib-${ZLIB_VERSION}/

ENV GRADLE_HOME=/opt/gradle-${GRADLE_VERSION}
ENV SCALA_HOME=/opt/scala-${SCALA_VERSION}
ENV GRAALVM_HOME=/opt/graalvm-ce-java${JAVA_VERSION}-${GRAALVM_VERSION}
ENV JAVA_HOME=${GRAALVM_HOME}
ENV PATH=${GRAALVM_HOME}/bin:${GRADLE_HOME}/bin:${SCALA_HOME}/bin:${PATH}

RUN gu install native-image

WORKDIR ${GRAALVM_WORKDIR}

# Copy the entire project and build it
# This layer is rebuilt when a file changes in the project directory
COPY . ${GRAALVM_WORKDIR}
RUN ${GRADLE_HOME}/bin/gradle -q --no-daemon nativeImage

# Create a staging image (this will be part of the distribution)
#FROM alpine AS app-stage
FROM scratch AS app-stage

ARG GRAALVM_WORKDIR

ENV GRAALVM_WORKDIR=${GRAALVM_WORKDIR}
ENV APP_HOME=/opt/ddns
ENV PATH=${APP_HOME}/bin:${PATH}

WORKDIR ${APP_HOME}

COPY --from=build /graalvm/src/project/build/ddns /graalvm/src/project/ddns.properties ${APP_HOME}/

#CMD [ "/bin/sh" ]

# And we finally create the application layer
FROM app-stage AS app
ENTRYPOINT [ "./ddns" ]
CMD [ "-XX:+PrintGC" , "-XX:+PrintGCTimeStamps" , "-XX:+VerboseGC" , "-d" ]
